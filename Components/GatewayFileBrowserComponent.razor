@namespace Archive2035.Components
@using System.IO
@inject HttpClient _httpClient 
@inject IJSRuntime JSRuntime

<link href="_content/Blazorise.Icons.FontAwesome/v6/css/all.min.css" rel="stylesheet">
<link rel="stylesheet" href="css/GatewayFileBrowserComponent.css?v=1.4">


<body>
    <script src="js/passwordEnter.js"></script>
    <script src="js/safeActions.js?v=1.1"></script>

    @if (!isFileViewerOpen)
    {
        <div class="file-browser-container">
            <div class="file-browser">
                <div class="file-browser-content">
                    @if (currentPath == "Root")
                    {
                        <div class="file-item folder" @onclick='() => OpenFolder("Modern Hacking Pt2")'>
                            <i class="fas fa-folder"></i> Modern Hacking 2
                        </div>
                        <div class="file-item folder" @onclick='() => OpenFolder("CIA Documents")'>
                            <i class="fas fa-folder"></i> CIA Documents
                        </div>
                        <div class="file-item folder" @onclick='() => OpenFolder("Project Victory")'>
                            <i class="fas fa-folder"></i> Project Victory
                        </div>
                        <div class="file-item folder" @onclick='() => OpenFolder("Synchronicity & Synapse")'>
                            <i class="fas fa-folder"></i> Synchronicity & Synapse
                        </div>
                    }
                    else
                    {
                        <div class="file-item folder" @onclick="BackToRoot">
                            <i class="fas fa-arrow-left"></i> ...
                        </div>
                        @if (currentPath == "Modern Hacking Pt2")
                        {
                            <div class="file-item file" @onclick='async () => await OpenFile("Resources/GatewayComponentRes/Modern Hacking Pt2/Broken_Access_Control.txt")'>
                                <i class="fas fa-file"></i> Broken Access Control
                            </div>
                            <div class="file-item file" @onclick='async () => await OpenFile("Resources/GatewayComponentRes/Modern Hacking Pt2/Facebook.txt")'>
                                <i class="fas fa-file"></i> Facebook
                            </div>
                            <div class="file-item file" @onclick='async () => await OpenFile("Resources/GatewayComponentRes/Modern Hacking Pt2/Uber.txt")'>
                                <i class="fas fa-file"></i> Uber
                            </div>
                            <div class="file-item file" @onclick='async () => await OpenFile("Resources/GatewayComponentRes/Modern Hacking Pt2/Defending_BAC.txt")'>
                                <i class="fas fa-file"></i> Defending BAC
                            </div>
                        }
                        else if (currentPath == "CIA Documents")
                        {
                            <div class="file-item file" @onclick='async () => await OpenFile("Resources/GatewayComponentRes/CIA Documents/COINTELPRO.txt")'>
                                <i class="fas fa-file"></i> COINTELPRO
                            </div>
                            <div class="file-item file" @onclick='async () => await OpenFile("Resources/GatewayComponentRes/CIA Documents/MKUltra.txt")'>
                                <i class="fas fa-file"></i> MKUltra
                            </div>
                            <div class="file-item file" @onclick='async () => await OpenFile("Resources/GatewayComponentRes/CIA Documents/SHAMROCK.txt")'>
                                <i class="fas fa-file"></i> SHAMROCK
                            </div>
                            <div class="file-item file" @onclick='async () => await OpenFile("Resources/GatewayComponentRes/CIA Documents/Vault7.txt")'>
                                <i class="fas fa-file"></i> Vault 7
                            </div>
                        }
                        else if (currentPath == "Project Victory")
                        {
                            <!-- Add files for Project Victory here -->
                        }
                        else if (currentPath == "Synchronicity & Synapse")
                        {
                            <div class="file-item file" @onclick='async () => await OpenFile("Resources/GatewayComponentRes/Synchronicity & Synapse/Vannevar_Bush.txt")'>
                                <i class="fas fa-file"></i> Vannevar Bush
                            </div>
                            <div class="file-item file" @onclick='async () => await OpenFile("Resources/GatewayComponentRes/Synchronicity & Synapse/Ted_Nelson.txt")'>
                                <i class="fas fa-file"></i> Ted Nelson
                            </div>
                            <div class="file-item file" @onclick='async () => await OpenFile("Resources/GatewayComponentRes/Synchronicity & Synapse/Norbert_Wiener.txt")'>
                                <i class="fas fa-file"></i> Norbert Wiener
                            </div>
                            <div class="file-item file" @onclick='async () => await OpenFile("Resources/GatewayComponentRes/Synchronicity & Synapse/B.F_Skinner.txt")'>
                                <i class="fas fa-file"></i> B.F. Skinner
                            </div>
                            <div class="file-item file" @onclick='async () => await OpenFile("Resources/GatewayComponentRes/Synchronicity & Synapse/Marshall_McLuhan.txt")'>
                                <i class="fas fa-file"></i> Marshall McLuhan 
                            </div>
                            <div class="file-item file" @onclick='async () => await OpenFile("Resources/GatewayComponentRes/Synchronicity & Synapse/Joseph_Weizenbaum.txt")'>
                                <i class="fas fa-file"></i> Joseph Weizenbaum
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    }

    @if (isFileViewerOpen)
    {
        <div class="file-viewer">
            <button class="close-button" @onclick="CloseFileViewer">X</button>
            <pre>@fileContent</pre>
        </div>
    }

    @if (IsPasswordValidatorVisible)
    {
        <div class="modal-overlay">
            <div class="modal-content">
                <h3>Password Required</h3>
                <div class="modal-body">
                    <label for="password">Enter Password:</label>
                    <input type="password" id="passwordkey" @bind="password" @oninput="ClearErrorMessage" @onkeydown="HandleEnterPress" />
                    <p id="password-error" style="color:red; display:@(passwordError ? "block" : "none");">Incorrect password, please try again.</p>
                </div>
                <div class="modal-footer">
                    <button class="modal-button modal-button-submit" @onclick="ValidatePassword">Submit</button>
                    <button class="modal-button" @onclick="CloseModal">Cancel</button>
                </div>
            </div>
        </div>
    }

    <h3>Input Codes</h3>
    <div class="input-container">
        <div>
            <label for="input1">Code 1:</label>
            <input id="input1" class="input-field" @bind="input1" placeholder="Enter code 1" />
        </div>
        <div>
            <label for="input2">Code 2:</label>
            <input id="input2" class="input-field" @bind="input2" placeholder="Enter code 2" />
        </div>
        <div>
            <label for="input3">Code 3:</label>
            <input id="input3" class="input-field" @bind="input3" placeholder="Enter code 3" />
        </div>

        <button class="keysubmitButton" @onclick="SubmitCodes">Submit</button>

        <div style="margin-top: 10px;">
            <label for="result">Output:</label>
            <textarea id="result" class="output-area" readonly rows="3"> 
                @resultText
            </textarea>
        </div>
        <div id="password" style="display:none;">MvpInnovationRogue</div>
    </div>
</body>

@code {
    private string currentPath = "Root";
    private string fileContent = string.Empty;
    private bool isFileViewerOpen = false;
    private string input1 = "";
    private string input2 = "";
    private string input3 = "";
    private string resultText;
    private bool haveDelayed = false; // Tracks whether the delay has occurred


     private bool isSubmitting = false;

    private string password { get; set; }
    private bool passwordError { get; set; }
    [Parameter] public bool IsPasswordValidatorVisible { get; set; }
    private ElementReference modalOverlay;


    private void HandleInputChange(ChangeEventArgs e)
    {
        password = e.Value?.ToString();
    }


    private void ClearErrorMessage(ChangeEventArgs e)
    {
        passwordError = false; // Reset the error flag
        password = e.Value?.ToString(); // Update the password value (if needed)
    }
    private async Task HandleEnterPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            // Prevent double submission by setting a flag if necessary
            await ValidatePassword();
        }
    }

    private async Task HandleModalClose(bool isPasswordCorrect)
    {
        if (isPasswordCorrect)
        {
            IsPasswordValidatorVisible = false;
            await Task.Delay(100);
            await JSRuntime.InvokeVoidAsync("hideModal");
            await OpenFolder(currentPath); // Reattempt to open the folder
        }
        else
        {
            IsPasswordValidatorVisible = true;
        }
    }

    private async Task ValidatePassword()
    {
        if (password == null)
        {
            Console.WriteLine("Password is null");
            return;
        }

        password = password.Trim();

        Console.WriteLine("Validating Password");
        Console.WriteLine($"Entered Password: {password}");

        //Tiberium99
        if (password == "MvpInnovationRogue") // Replace with actual password
        {
            passwordError = false;
            await HandleModalClose(true);
            TriggerGame();
        }
        else
        {
            passwordError = true;
            await JSRuntime.InvokeVoidAsync("showTemporaryError", "Incorrect password, please try again.");
        }
    }


    private async Task CloseModal()
    {
        IsPasswordValidatorVisible = false;
        password = string.Empty; // Clear the password field when the modal is closed
        await Task.Delay(100);
        await JSRuntime.InvokeVoidAsync("hideModal");
    }




    private async void SubmitCodes()
    {
        Console.WriteLine("SubmitCodes called");
        
        // Optional: Add a short delay the first time to ensure JavaScript is loaded
        if (!haveDelayed)
        {
            Console.WriteLine("Delaying to ensure JavaScript is loaded...");
            await Task.Delay(200); // Increased delay slightly
            haveDelayed = true; // Set to true after the first delay
            Console.WriteLine("Delay completed.");
        }

        // Construct the result text from the inputs
        resultText = $"code 1: {input1}   code 2: {input2}   code 3: {input3}";
        Console.WriteLine("ResultText set: " + resultText);

        // Force UI to update after setting resultText
        StateHasChanged();

        // Run the safe actions for the entered codes
        Console.WriteLine("Running safe actions...");
        await RunSafeAction(input1, input2, input3);
        Console.WriteLine("Safe actions completed.");
    }

    private async Task RunSafeAction(params string[] codes)
    {
        foreach (var code in codes)
        {
            if (!string.IsNullOrWhiteSpace(code))
            {
                Console.WriteLine($"Executing safeActions.run for code: {code}");
                await JSRuntime.InvokeVoidAsync("safeActions.run", code);
            }
        }
    }

    private async Task OpenFolder(string folderName)
    {
        if (folderName == "Project Victory" && !IsPasswordValidatorVisible)
        {
            IsPasswordValidatorVisible = true;
            await Task.Delay(100);
            await JSRuntime.InvokeVoidAsync("showModal");
            // Ensure JavaScript initializes modal events
            await JSRuntime.InvokeVoidAsync("initializeModalEvents");
        }
        else if (IsPasswordValidatorVisible)
        {
            await Task.Delay(0); // Placeholder; adjust as needed
        }
        else
        {
            currentPath = folderName;
        }
    }

    private void BackToRoot()
    {
        currentPath = "Root";
    }

    private async Task OpenFile(string filePath)
    {
        try
        {
            fileContent = await _httpClient.GetStringAsync(filePath);
            isFileViewerOpen = true;
        }
        catch (Exception ex)
        {
            fileContent = "Error: Unable to load the file content.";
            isFileViewerOpen = true;
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void CloseFileViewer()
    {
        isFileViewerOpen = false;
        fileContent = string.Empty;
        StateHasChanged();
    }

    private void TriggerGame()
    {
        OnTriggerGame.InvokeAsync();
    }

    [Parameter] public EventCallback OnTriggerGame { get; set; }
}