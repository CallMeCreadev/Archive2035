@inject IJSRuntime JSRuntime
@inject VolumeService VolumeService
@inject DifficultyService DifficultyService

<body>
    <div class="game-area" @ref="gameArea" @onkeydown="OnKeyPress" @onblur="OnBlur" @onfocus="OnFocus" tabindex="0">
        <audio id="backgroundMusic" autoplay loop @ref="audioRef">
        <source src="music/MJ-x-x part 2.mp3" type="audio/mp3">
            Your browser does not support the audio element.
        </audio>
        <div id="timer-container">
            <div id="timer">@($"{remainingTime / 60:D2}:{remainingTime % 60:D2}")</div>
        </div>

       @foreach (var target in targets)
        {
            <div class="@targetClass" id="@target.Id" @key="target.Id" style="@target.Style + @target.AnimationStyle" @onclick="() => TargetClicked(target)"></div>
        }


        @foreach (var square in squares)
        {
            <div class="square" id="@square.Id" style="left:@square.XPos; top:@square.YPos; background-color:@square.Color;"></div>
        }
        @if (isGameOver)
        {
            <div class="game-over-screen">
                <h2>Game Over</h2>
                <h2>Lives: @AttemptsRemaining</h2>
                <button @onclick="RestartGameSegment">Restart Level</button>
            </div>
        }
        @if (isGameWon)
        {
            <div class="game-won-screen">
                <h2>Level Complete!</h2>
                <button @onclick="AdvanceNextLevel">Advance to Next Level</button>
            </div>
        }
    </div>
</body>
<link href="css/gameplaySegment4.css?v=1.0" rel="stylesheet" />


@code {
    private ElementReference audioRef;

    private ElementReference gameArea;
    private List<Target> targets = new();
    private List<Square> squares = new();
    private List<int> xPositions = new(); // Track X positions of squares
    private List<int> yPositions = new(); // Track Y positions of squares

    //Normal Difficulty
    private string targetClass = "Normal";

    private bool isGameOver = false;
    private bool isGameWon = false;

    private int AttemptsRemaining = 4;
    private bool StopTimer = false;
    private int targetSpawnRate = 1000;
    private int targetDuration = 4000;
    private  int maxTargetClicks = 17; // Max number of targets to click
    
    private int targetCount = 0;
    private int clickedCount = 0;
    private int remainingTime = 90; // 90 seconds timer
    private readonly int squareSize = 8; // Size of the square in pixels
    private int userX; // User's current X position
    private int userY; // User's current Y position
    private int centerX; // Center X position of the screen
    private int centerY; // Center Y position of the screen

    private int loopCount = 0; // Track the number of completed loops
    private readonly int maxLoops = 3; // The maximum number of loops allowed

    [Parameter] public EventCallback OnLevelComplete { get; set; }
    [Parameter] public EventCallback OnGameLockout { get; set; }
    private CancellationTokenSource cancellationTokenSource = new();


    private Task SetDifficultyParameters()
    {
        Console.WriteLine("DifficultyService: " + DifficultyService.SelectedDifficulty);
        switch (DifficultyService.SelectedDifficulty)
        {
            case "Easy":
                targetSpawnRate = 1400; // Slower spawn rate
                targetDuration = 5000;  // Targets last longer
                maxTargetClicks = 16;   // Fewer targets to click
                targetClass = "target_easy";
                break;
            case "Normal":
                targetSpawnRate = 1000; // Default spawn rate
                targetDuration = 3500;  // Default duration
                maxTargetClicks =  23;   // Default target count
                targetClass = "target_normal";
                break;
            case "Hard":
                targetSpawnRate = 800;  // Faster spawn rate
                targetDuration = 2800;  // Targets last shorter time
                maxTargetClicks = 28;   // More targets to click
                targetClass = "target_hard";
                break;
            case "Brutal":
                targetSpawnRate = 700;  // Very fast spawn rate
                targetDuration = 2500;  // Very short duration
                maxTargetClicks = 32;   // Most targets to click
                targetClass = "target_brutal";
                break;
        }

        return Task.CompletedTask; // Return a completed task to make this method awaitable
    }

        protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("GameSegment1: OnInitializedAsync called");
        await base.OnInitializedAsync();

        await Task.Delay(100); // Ensure JavaScript is loaded
        await SetDifficultyParameters();

        await ApplyVolume();
        VolumeService.OnVolumeChanged += OnVolumeChanged;

        var center = await JSRuntime.InvokeAsync<int[]>("getScreenCenter");
        centerX = center[0];
        centerY = center[1];
        userX = centerX;
        userY = centerY;
        xPositions.Add(centerX); // Initialize with center position
        yPositions.Add(centerY);

        _ = StartGameAsync(cancellationTokenSource.Token);
        _ = StartTimerAsync(cancellationTokenSource.Token);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("GameSegment1: OnAfterRenderAsync firstRender called");
            await FocusGameArea();
        }
    }

    private async Task FocusGameArea()
    {
        Console.WriteLine("gamesegment2: Focusing game area");
        await Task.Delay(200); // Small delay to ensure the game area is rendered

        if (gameArea.Id != string.Empty)
        {
            Console.WriteLine("gamesegment2: gameArea found, focusing now.");
            await gameArea.FocusAsync();
        }
        else
        {
            Console.WriteLine("gamesegment2: gameArea is not initialized, cannot focus.");
        }

    }

    private void OnBlur()
    {
        if (gameArea.Id != string.Empty)
        {
            Console.WriteLine("gamesegment2: OnBlur called, attempting to refocus game area.");
            _ = FocusGameArea(); // Ensure this runs only if `gameArea` is initialized
        }
        else
        {
            Console.WriteLine("gamesegment2: gameArea is not initialized, cannot refocus.");
        }
    }

    private void OnFocus()
    {
        Console.WriteLine("gamesegment2: Game area gained focus");
        // Handle the focus event if necessary
    }

    private void OnVolumeChanged()
    {
        _ = ApplyVolume(); // Start the async operation without awaiting it
    }


    private async Task ApplyVolume()
    {
        await JSRuntime.InvokeVoidAsync("setVolume", audioRef, VolumeService.Volume);
    }

    private async Task CompleteGameSegment()
    {
        Console.WriteLine("gamesegment4: CompleteGameSegment called");

        if (!cancellationTokenSource.Token.IsCancellationRequested)
        {
            loopCount++;

            if (loopCount < maxLoops)
            {
                Console.WriteLine($"gamesegment4: Loop {loopCount} completed. Resetting game state for next loop.");

                // Reset game state for the next loop
                squares.Clear();
                xPositions.Clear();
                yPositions.Clear();
                var center = await JSRuntime.InvokeAsync<int[]>("getScreenCenter");
                centerX = center[0];
                centerY = center[1];
                userX = centerX;
                userY = centerY;
                xPositions.Add(centerX); // Initialize with center position
                yPositions.Add(centerY);
                clickedCount = 0;

                // The while loop in StartGameAsync will handle the next loop automatically
                StateHasChanged(); // Update the UI to reflect cleared squares
            }
            else
            {
                Console.WriteLine("gamesegment4: Maximum loops reached. Ending game.");
                StopTimer = true;
                isGameWon = true;
            }
        }
    }
  
    private void InitializeGameArea(int[] center)
    {
        centerX = center[0];
        centerY = center[1];
        userX = centerX;
        userY = centerY;
        xPositions.Add(centerX); // Initialize with center position
        yPositions.Add(centerY);
    }


    private async Task AdvanceNextLevel()
    {
        Console.WriteLine("Advance Level called, ending game segment");
        if (!cancellationTokenSource.Token.IsCancellationRequested)
        {
            Dispose(); // Clean up the current game segment to stop ongoing tasks
            await Task.Delay(250); // Wait for 1 second
            await OnLevelComplete.InvokeAsync(); // Trigger the callback to move to the next game state
        }
    }


     private async Task FailGameSegment()
    {
        isGameOver = true;
        AttemptsRemaining -= 1;
        Dispose(); // Clean up the current game segment to stop ongoing tasks
        if(AttemptsRemaining < 1)
        {
            await OnGameLockout.InvokeAsync(); // Trigger the callback to move to the next game state
        }
    }

    private async Task RestartGameSegment()
    {
        isGameOver = false;

        loopCount = 0;
        targetCount = 0;
        clickedCount = 0;
        remainingTime = 90; // Reset the timer to 60 seconds

        // Clear existing targets and squares
        targets.Clear();
        squares.Clear();
        xPositions.Clear();
        yPositions.Clear();

        // Reinitialize the game area
        var center = await JSRuntime.InvokeAsync<int[]>("getScreenCenter");
        InitializeGameArea(center);

        // Restart the game loop and timer
        cancellationTokenSource = new CancellationTokenSource();
        _ = StartGameAsync(cancellationTokenSource.Token);
        _ = StartTimerAsync(cancellationTokenSource.Token);
        
        // Update the UI
        StateHasChanged();
    }


     private async Task StartGameAsync(CancellationToken cancellationToken)
    {
        Console.WriteLine("gamesegment5: Starting game loop");
        while (!cancellationToken.IsCancellationRequested)
        {
            Console.WriteLine("ClickedCount " + clickedCount);
            Console.WriteLine("maxTragetClicks " + maxTargetClicks);
            if (clickedCount < maxTargetClicks && targets.Count < 4)
            {
                AddNewTarget();
                await Task.Delay(targetSpawnRate); // Spawns a new target every 0.7 seconds
            }
            else if (clickedCount >= maxTargetClicks)
            {
                
                Console.WriteLine("gamesegment5: Max target clicks reached, checking squares...");
                if (CheckIfAllSquaresAreWhite())
                {
                    Console.WriteLine("gamesegment5: All squares are white, breaking loop");
                    break; // Break out of the loop if all squares are white
                }
                await Task.Delay(150); // Checks the squares every 0.2 seconds
            }
            
        }
        Console.WriteLine("gamesegment5: Game loop ended");

        // End the game after exiting the loop
        if (!cancellationToken.IsCancellationRequested)
        {
            await CompleteGameSegment();
        }
    }
    
    private async void AddNewTarget()
    {
        //Console.WriteLine($"gamesegment4: Adding new target, clickedCount = {clickedCount}, targetCount = {targetCount}");
        if (clickedCount >= maxTargetClicks) return; // Stop adding targets after maxTargetClicks

        var targetId = "target-" + targetCount++; // Assign unique ID to each target
        var target = new Target
        {
            Id = targetId,
            Style = GenerateRandomPosition(),
            AnimationStyle = "animation: growShrink 2.5s forwards;" // Apply the appropriate animation
        };
        targets.Add(target);
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("logAnimationEvents", target.Id); // Log animation events
        _ = RemoveTargetAfterDelay(target);
    }

    private async Task RemoveTargetAfterDelay(Target target)
    {
        await Task.Delay(targetDuration); // Target decays after 2.5 seconds
        if (targets.Contains(target))
        {
            targets.Remove(target);
            //Console.WriteLine($"gamesegment4: Target removed, target ID = {target.Id}");
            StateHasChanged();
        }
    }

    private void TargetClicked(Target target)
    {
        clickedCount++;
        targets.Remove(target);
        //Console.WriteLine($"gamesegment4: Target clicked, clickedCount = {clickedCount}");
        AddNewSquare(); // Add a square when a target is clicked
        StateHasChanged();

        if (clickedCount >= maxTargetClicks) // Stop generating squares after maxTargetClicks
        {
            _ = CheckIfAllSquaresAreWhite();
        }
    }

    public void Dispose()
    {
        Console.WriteLine("GameSegment2: Disposing, canceling tasks");
         VolumeService.OnVolumeChanged -= OnVolumeChanged;
        cancellationTokenSource.Cancel();
        cancellationTokenSource.Dispose();
    }

    private async Task StartTimerAsync(CancellationToken cancellationToken)
    {
        Console.WriteLine("GameSegment1: Timer started");
        while (remainingTime > 0 && !cancellationToken.IsCancellationRequested && !StopTimer)
        {
            await Task.Delay(1000); // Wait for 1 second
            remainingTime--;
            StateHasChanged(); // Update the UI
        }
        if (!cancellationToken.IsCancellationRequested && !StopTimer)
        {
            Console.WriteLine("GameSegment1: Timer finished, ending game segment (Fail)");
            await FailGameSegment(); // End the game when the timer reaches 0
        }
    }

    private string GenerateRandomPosition()
    {
        var random = new Random();
        var top = random.Next(10, 90); // Random position on Y-axis
        var left = random.Next(10, 90); // Random position on X-axis
        //Console.WriteLine($"gamesegment4: Generated random position: top={top}%, left={left}%");
        return $"top: {top}%; left: {left}%;";
    }

    private void AddNewSquare()
    {
        //Console.WriteLine("gamesegment4: Adding new square");
        var random = new Random();
        int newX = xPositions.Any() ? xPositions[^1] : centerX; // Use previous X position or default to center
        int newY = yPositions.Any() ? yPositions[^1] : centerY; // Use previous Y position or default to center

        bool validPosition = false;

        while (!validPosition)
        {
            newX = xPositions.Any() ? xPositions[^1] : centerX; // Use previous X position or default to center
            newY = yPositions.Any() ? yPositions[^1] : centerY; // Use previous Y position or default to center

            int direction = random.Next(0, 4); // 0 = right, 1 = down, 2 = left, 3 = up

            switch (direction)
            {
                case 0: // right
                    newX += squareSize;
                    break;
                case 1: // down
                    newY += squareSize;
                    break;
                case 2: // left
                    newX -= squareSize;
                    break;
                case 3: // up
                    newY -= squareSize;
                    break;
            }

            // Check if the position is valid (not overlapping any existing square)
            if (!xPositions.Contains(newX) || !yPositions.Contains(newY))
            {
                //Console.WriteLine($"gamesegment4: New square position valid - X: {newX}, Y: {newY}");
                validPosition = true;
            }
        }

        // Update position lists
        xPositions.Add(newX);
        yPositions.Add(newY);

        // Set the user's initial position to the first square
        if (!squares.Any())
        {
            userX = newX;
            userY = newY;
        }

        var squareId = "square-" + squares.Count;
        var newSquare = new Square
        {
            Id = squareId,
            XPos = $"{newX}px",
            YPos = $"{newY}px",
            Color = squares.Count == 0 ? "white" : "red" // First square is white, others are red
        };

        squares.Add(newSquare);
        Console.WriteLine("New Square Added: "+ newX +","+newY);
        StateHasChanged(); // Update the UI to show the new square
    }
 
    private void OnKeyPress(KeyboardEventArgs e)
    {
        if (isGameWon || isGameOver)
        {
            return;
        }
        
        if (xPositions.Count <= 1 || yPositions.Count <= 1 || squares.Count <= 1)
        {
            Console.WriteLine("Error: Positions or squares are not initialized.");
            return; // Early return if the lists are not initialized properly
        }

        int newX = userX;
        int newY = userY;

        switch (e.Key)
        {
            case "w": // Up
                newY -= squareSize;
                break;
            case "a": // Left
                newX -= squareSize;
                break;
            case "s": // Down
                newY += squareSize;
                break;
            case "d": // Right
                newX += squareSize;
                break;
        }

        Console.WriteLine($"gamesegment5: User moved to - X: {newX}, Y: {newY} - Previous X: {userX}, Y: {userY}");

        // Check if the new position matches any existing square
        bool matchFound = false;
        for (int i = 1; i < xPositions.Count; i++)
        {
            if (xPositions[i] == newX && yPositions[i] == newY)
            {
                squares[i - 1].Color = "white";
                StateHasChanged();
                matchFound = true;
                break;
            }
        }

        if (!matchFound)
        {
            // Reset all squares to red and reset user position to first square
            for (int i = 1; i < squares.Count; i++)
            {
                squares[i].Color = "red";
            }

            userX = xPositions[1];
            userY = yPositions[1];
            StateHasChanged();
        }
        else
        {
            // Update user position only if match found
            userX = newX;
            userY = newY;
        }
    }

    private bool CheckIfAllSquaresAreWhite()
    {
        if (squares.Count >= maxTargetClicks && squares.All(s => s.Color == "white"))
        {
            if (loopCount < (maxLoops - 1))
            {
                Console.WriteLine("gamesegment4: All squares are white, condition met. Proceeding to the next loop.");
                _ = CompleteGameSegment(); // Proceed to the next loop
                return false; // Do not end the game yet, continue looping
            }
            else
            {
                Console.WriteLine("gamesegment4: All squares are white and final loop completed. Ending game.");
                _ = CompleteGameSegment(); // End the game
                return true; // End the game
            }
        }
        else
        {
            //Console.WriteLine("gamesegment4: Not all squares are white or square count mismatch");
            return false; // Condition not met
        }
    }

    private class Target
    {
        public string Id { get; set; } // String ID
        public string Style { get; set; }
        public string AnimationStyle { get; set; } // Inline animation style
    }

    private class Square
    {
        public string Id { get; set; } // String ID
        public string XPos { get; set; } // X position
        public string YPos { get; set; } // Y position
        public string Color { get; set; } = "red"; // Default color is red
    }
}
