@inject IJSRuntime JSRuntime
@inject VolumeService VolumeService
@inject EliteModeSettingsService EliteModeSettingsService
@using System

<body class="@bodyClass">
    <script src="js/eliteMode.js"></script>
    <div class="game-area" @ref="gameArea" @onkeydown="OnKeyPress" @onblur="OnBlur" @onfocus="OnFocus" tabindex="0">
        <audio id="backgroundMusic" class="music-source" autoplay loop @ref="audioRef">
            <source src="@musicTrack" type="audio/mp3">
            Your browser does not support the audio element.
        </audio>
        <div id="timer-container">
            <div id="timer">@($"{remainingTime / 60:D2}:{remainingTime % 60:D2}")</div>
        </div>

        @foreach (var target in targets)
        {
            <div class="@targetClass" id="@target.Id" @key="target.Id" style="@target.Style + @target.AnimationStyle" @onclick="() => TargetClicked(target)"></div>
        }

        @foreach (var square in squares)
        {
            <div class="square" id="@square.Id" style="left:@square.XPos; top:@square.YPos; background-color:@square.Color;"></div>
        }
        @if (isGameOver)
        {
            <div class="game-over-screen">
                <h2>Game Over</h2>
                <p>Puzzles Solved: @loopCount</p>
                <button @onclick="RestartGameSegment">Restart Game</button>
            </div>
        }
    </div>
</body>
<link href="css/EliteModeGameplay.css?v=1.1" rel="stylesheet" />

@code {
    private ElementReference audioRef;
    private ElementReference gameArea;
    private List<Target> targets = new();
    private List<Square> squares = new();
    private List<int> xPositions = new(); // Track X positions of squares
    private List<int> yPositions = new(); // Track Y positions of squares
    
    private string targetClass = "Normal";
    private string musicTrack;
    private string bodyClass;
    
    private bool isGameOver = false;

    private int targetSpawnRate = 700;
    private int targetDuration = 2500;
    private Double maxTargetClicks = 24; // Max number of targets to click
    
    private int targetCount = 0;
    private Double clickedCount = 0;
    private int remainingTime = 60; // 90 seconds timer
    private readonly int squareSize = 8; // Size of the square in pixels
    private int userX; // User's current X position
    private int userY; // User's current Y position
    private int centerX; // Center X position of the screen
    private int centerY; // Center Y position of the screen

    private int loopCount = 0; // Track the number of completed loops
    private readonly int maxLoops = 9999; // The maximum number of loops allowed


    private CancellationTokenSource cancellationTokenSource = new();

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Elite Mode Initialize called");
        await base.OnInitializedAsync();

        // Ensure JavaScript is loaded (Consider a more robust approach)
        await Task.Delay(100);

        // Subscribe to setting change events
        SubscribeToEvents();

        // Apply initial settings
        await ApplyInitialSettings();

        var center = await JSRuntime.InvokeAsync<int[]>("getScreenCenter");
        InitializeGameArea(center);

        _ = StartGameAsync(cancellationTokenSource.Token);
        _ = StartTimerAsync(cancellationTokenSource.Token); // Start the timer when the game initializes

        // Set focus to the game area
        await FocusGameArea();
    }

    private void SubscribeToEvents()
    {
        EliteModeSettingsService.OnBackgroundChanged += OnBackgroundChanged;
        EliteModeSettingsService.OnMusicChanged += OnMusicChanged;
        EliteModeSettingsService.OnTargetChanged += OnTargetChanged;
        VolumeService.OnVolumeChanged += OnVolumeChanged;
    }

    private async Task ApplyInitialSettings()
    {
        await SetBackground();
        await GetTargetClass();
        await GetMusicChoice();
        await ApplyVolume();
    }

    private void InitializeGameArea(int[] center)
    {
        centerX = center[0];
        centerY = center[1];
        userX = centerX;
        userY = centerY;
        xPositions.Add(centerX); // Initialize with center position
        yPositions.Add(centerY);
    }

    private async Task SetBackground()
    {
        var background = EliteModeSettingsService.SelectedBackground;
        await JSRuntime.InvokeVoidAsync("setBackgroundImage", background);
    }

    private async Task GetTargetClass()
    {
        targetClass = EliteModeSettingsService.SelectedTargetColor switch
        {
            "White" => "target_white",
            "Blue" => "target_blue",
            "Red" => "target_red",
            "Green" => "target_green",
            "Yellow" => "target_yellow",
            _ => "target_red"
        };
        await Task.CompletedTask;
        Console.WriteLine("Elite Game Color: " + targetClass);
    }

    private async Task GetMusicChoice()
    {
        try
        {
            musicTrack = EliteModeSettingsService.GetMusicTrack();
            await JSRuntime.InvokeVoidAsync("setAudioSource", audioRef, musicTrack);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to set audio source: {ex.Message}");
        }
        Console.WriteLine("Elite Game Music: " + musicTrack);
    }

    private async Task ApplyVolume()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("setVolume", audioRef, VolumeService.Volume);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to set volume: {ex.Message}");
        }
    }

    private void OnBackgroundChanged()
    {
        _ = SetBackground(); // Update the background when the setting changes
    }

    private void OnMusicChanged()
    {
        _ = GetMusicChoice().ContinueWith(t =>
        {
            if (t.Exception != null)
            {
                Console.WriteLine($"Error changing music: {t.Exception.Message}");
            }
        });
    }

    private void OnTargetChanged()
    {
        _ = GetTargetClass().ContinueWith(t =>
        {
            if (t.Exception != null)
            {
                Console.WriteLine($"Error changing target class: {t.Exception.Message}");
            }
        });
    }

    private void OnVolumeChanged()
    {
        _ = ApplyVolume().ContinueWith(t =>
        {
            if (t.Exception != null)
            {
                Console.WriteLine($"Error applying volume: {t.Exception.Message}");
            }
        });
    }

    private async Task CompleteGameSegment()
    {
        Console.WriteLine("gamesegment5: CompleteGameSegment called");

        if (!cancellationTokenSource.Token.IsCancellationRequested)
        {
            loopCount++;
            remainingTime += 24;
            if(loopCount % 10 == 0)
            {
                targetSpawnRate = (int)Math.Floor(targetSpawnRate * 0.85);
                targetDuration = (int)Math.Floor(targetDuration * 0.85);
                maxTargetClicks = (int)Math.Ceiling(maxTargetClicks * 1.07);
            }
            else if(loopCount % 5 == 0)
            {
                maxTargetClicks = (int)Math.Ceiling(maxTargetClicks * 1.07);
            }
            Console.WriteLine("TargetSpawnRate: " + targetSpawnRate + "targetDuration: " +targetDuration + "maxTargetClicks: " + maxTargetClicks );

            if (loopCount < maxLoops)
            {
                Console.WriteLine($"gamesegment5: Loop {loopCount} completed. Resetting game state for next loop.");

                // Reset game state for the next loop
                squares.Clear();
                xPositions.Clear();
                yPositions.Clear();
                var center = await JSRuntime.InvokeAsync<int[]>("getScreenCenter");
                InitializeGameArea(center);
                clickedCount = 0;

                // The while loop in StartGameAsync will handle the next loop automatically
                StateHasChanged(); // Update the UI to reflect cleared squares
            }
            else
            {
                Dispose();
            }
        }
    }

    private async Task FocusGameArea()
    {
        await Task.Delay(100); // Small delay to ensure the game area is rendered
        await gameArea.FocusAsync();
    }

    private async Task OnBlur()
    {
        await FocusGameArea();
    }

    private void OnFocus()
    {
        // Handle the focus event if necessary
    }

    private async Task FailGameSegment()
    {
        isGameOver = true;
        Dispose(); // Clean up the current game segment to stop ongoing tasks
    }


    private async Task RestartGameSegment()
    {
        isGameOver = false;
        loopCount = 0;
        targetSpawnRate = 700;
        targetDuration = 2500;
        maxTargetClicks = 24; // Max number of targets to click

        targetCount = 0;
        clickedCount = 0;
        remainingTime = 60; // Reset the timer to 60 seconds

        // Clear existing targets and squares
        targets.Clear();
        squares.Clear();
        xPositions.Clear();
        yPositions.Clear();

        // Reinitialize the game area
        var center = await JSRuntime.InvokeAsync<int[]>("getScreenCenter");
        InitializeGameArea(center);

        // Restart the game loop and timer
        cancellationTokenSource = new CancellationTokenSource();
        _ = StartGameAsync(cancellationTokenSource.Token);
        _ = StartTimerAsync(cancellationTokenSource.Token);
        
        // Update the UI
        StateHasChanged();
    }

    private async Task StartGameAsync(CancellationToken cancellationToken)
    {
        Console.WriteLine("gamesegment5: Starting game loop");
        while (!cancellationToken.IsCancellationRequested)
        {

            if (clickedCount < maxTargetClicks && targets.Count < 4)
            {
                AddNewTarget();
                await Task.Delay(targetSpawnRate); // Spawns a new target every 0.7 seconds
            }
            else if (clickedCount >= maxTargetClicks)
            {
                //Console.WriteLine("gamesegment5: Max target clicks reached, checking squares...");
                if (CheckIfAllSquaresAreWhite())
                {
                    //Console.WriteLine("gamesegment5: All squares are white, breaking loop");
                    break; // Break out of the loop if all squares are white
                }
                await Task.Delay(150); // Checks the squares every 0.2 seconds
            }
            else{
                await Task.Delay(150); // Checks the squares every 0.2 seconds
            }
        }
        Console.WriteLine("gamesegment5: Game loop ended");

        // End the game after exiting the loop
        if (!cancellationToken.IsCancellationRequested)
        {
            await CompleteGameSegment();
        }
    }

    private async void AddNewTarget()
    {
        if (clickedCount >= maxTargetClicks) return; // Stop adding targets after maxTargetClicks

        var targetId = "target-" + targetCount++; // Assign unique ID to each target
        var target = new Target
        {
            Id = targetId,
            Style = GenerateRandomPosition(),
            AnimationStyle = "animation: growShrink 2.5s forwards;" // Apply the appropriate animation
        };
        targets.Add(target);
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("logAnimationEvents", target.Id); // Log animation events
        _ = RemoveTargetAfterDelay(target);
    }

    private async Task RemoveTargetAfterDelay(Target target)
    {
        await Task.Delay(targetDuration); // Target decays after 2.5 seconds
        if (targets.Contains(target))
        {
            targets.Remove(target);
            StateHasChanged();
        }
    }

    private void TargetClicked(Target target)
    {
        clickedCount++;
        targets.Remove(target);
        AddNewSquare(); // Add a square when a target is clicked
        StateHasChanged();

        if (clickedCount >= maxTargetClicks) // Stop generating squares after maxTargetClicks
        {
            _ = CheckIfAllSquaresAreWhite();
        }
    }

    public void Dispose()
    {
        Console.WriteLine("GameSegment2: Disposing, canceling tasks");
        EliteModeSettingsService.OnBackgroundChanged -= OnBackgroundChanged;
        EliteModeSettingsService.OnMusicChanged -= OnMusicChanged;
        EliteModeSettingsService.OnTargetChanged -= OnTargetChanged;
        VolumeService.OnVolumeChanged -= OnVolumeChanged;
        cancellationTokenSource.Cancel();
        cancellationTokenSource.Dispose();
    }

    private async Task StartTimerAsync(CancellationToken cancellationToken)
    {
        while (remainingTime > 0 && !cancellationToken.IsCancellationRequested)
        {
            await Task.Delay(1000); // Wait for 1 second
            remainingTime--;
            StateHasChanged(); // Update the UI
        }
        if (!cancellationToken.IsCancellationRequested)
        {
            await FailGameSegment(); // End the game when the timer reaches 0
        }
    }

    private string GenerateRandomPosition()
    {
        var random = new Random();
        var top = random.Next(10, 90); // Random position on Y-axis
        var left = random.Next(10, 90); // Random position on X-axis
        return $"top: {top}%; left: {left}%;";
    }

    private void AddNewSquare()
    {
        var random = new Random();
        int newX = xPositions.Any() ? xPositions[^1] : centerX; // Use previous X position or default to center
        int newY = yPositions.Any() ? yPositions[^1] : centerY; // Use previous Y position or default to center

        bool validPosition = false;

        while (!validPosition)
        {
            newX = xPositions.Any() ? xPositions[^1] : centerX;
            newY = yPositions.Any() ? yPositions[^1] : centerY;

            int direction = random.Next(0, 4); // 0 = right, 1 = down, 2 = left, 3 = up

            switch (direction)
            {
                case 0: // right
                    newX += squareSize;
                    break;
                case 1: // down
                    newY += squareSize;
                    break;
                case 2: // left
                    newX -= squareSize;
                    break;
                case 3: // up
                    newY -= squareSize;
                    break;
            }

            // Check if the position is valid (not overlapping any existing square)
            if (!xPositions.Contains(newX) || !yPositions.Contains(newY))
            {
                validPosition = true;
            }
        }

        // Update position lists
        xPositions.Add(newX);
        yPositions.Add(newY);

        // Set the user's initial position to the first square
        if (!squares.Any())
        {
            userX = newX;
            userY = newY;
        }

        var squareId = "square-" + squares.Count;
        var newSquare = new Square
        {
            Id = squareId,
            XPos = $"{newX}px",
            YPos = $"{newY}px",
            Color = squares.Count == 0 ? "white" : "red" // First square is white, others are red
        };

        squares.Add(newSquare);
        //Console.WriteLine("New Square Added: " + newX + "," + newY);
        StateHasChanged(); // Update the UI to show the new square
    }

    private void OnKeyPress(KeyboardEventArgs e)
    {
        if (xPositions.Count <= 1 || yPositions.Count <= 1 || squares.Count <= 1)
        {
            Console.WriteLine("Error: Positions or squares are not initialized.");
            return; // Early return if the lists are not initialized properly
        }

        int newX = userX;
        int newY = userY;

        switch (e.Key)
        {
            case "w": // Up
                newY -= squareSize;
                break;
            case "a": // Left
                newX -= squareSize;
                break;
            case "s": // Down
                newY += squareSize;
                break;
            case "d": // Right
                newX += squareSize;
                break;
        }

        //Console.WriteLine($"gamesegment5: User moved to - X: {newX}, Y: {newY} - Previous X: {userX}, Y: {userY}");

        // Check if the new position matches any existing square
        bool matchFound = false;
        for (int i = 1; i < xPositions.Count; i++)
        {
            if (xPositions[i] == newX && yPositions[i] == newY)
            {
                squares[i - 1].Color = "white";
                StateHasChanged();
                matchFound = true;
                break;
            }
        }

        if (!matchFound)
        {
            // Reset all squares to red and reset user position to first square
            for (int i = 1; i < squares.Count; i++)
            {
                squares[i].Color = "red";
            }

            userX = xPositions[1];
            userY = yPositions[1];
            StateHasChanged();
        }
        else
        {
            // Update user position only if match found
            userX = newX;
            userY = newY;
        }
    }

    private bool CheckIfAllSquaresAreWhite()
    {
        if (squares.Count >= maxTargetClicks && squares.All(s => s.Color == "white"))
        {
            if (loopCount < (maxLoops - 1))
            {
                //Console.WriteLine("gamesegment5: All squares are white, condition met. Proceeding to the next loop.");
                _ = CompleteGameSegment(); // Proceed to the next loop
                return false; // Do not end the game yet, continue looping
            }
            else
            {
                //Console.WriteLine("gamesegment5: All squares are white and final loop completed. Ending game.");
                _ = CompleteGameSegment(); // End the game
                return true; // End the game
            }
        }
        else
        {
            return false; // Condition not met
        }
    }

    private class Target
    {
        public string Id { get; set; } // String ID
        public string Style { get; set; }
        public string AnimationStyle { get; set; } // Inline animation style
    }

    private class Square
    {
        public string Id { get; set; } // String ID
        public string XPos { get; set; } // X position
        public string YPos { get; set; } // Y position
        public string Color { get; set; } = "red"; // Default color is red
    }
}
